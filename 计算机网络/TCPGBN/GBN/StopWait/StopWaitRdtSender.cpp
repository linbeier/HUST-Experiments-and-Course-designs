#include "stdafx.h"
#include "Global.h"
#include "StopWaitRdtSender.h"
#include <iostream>


StopWaitRdtSender::StopWaitRdtSender():expectSequenceNumberSend(0),waitingState(false)
{
}


StopWaitRdtSender::~StopWaitRdtSender()
{
	delete[]windows;
}



bool StopWaitRdtSender::getWaitingState() {
	if (nextsequnum >= base + MAXWINDOWSIZE) {
		this->waitingState = true;
	}
	else
		this->waitingState = false;
	return waitingState;
}




bool StopWaitRdtSender::send(Message &message) {
	//if (this->waitingState) { //发送方处于等待确认状态
	//	return false;
	//}
	if (nextsequnum >= base + MAXWINDOWSIZE) {
		return false;
	}
	else
	{
		
		this->packetWaitingAck.acknum = -1; //忽略该字段
		this->packetWaitingAck.seqnum = this->expectSequenceNumberSend;
		this->packetWaitingAck.checksum = 0;
		memcpy(this->packetWaitingAck.payload, message.data, sizeof(message.data));
		this->packetWaitingAck.checksum = pUtils->calculateCheckSum(this->packetWaitingAck);
		pUtils->printPacket("发送方发送报文", this->packetWaitingAck);
		
		if (base == nextsequnum) {
			pns->startTimer(SENDER, Configuration::TIME_OUT, 0);			//启动发送方定时器
			
		}
		pns->sendToNetworkLayer(RECEIVER, this->packetWaitingAck);//调用模拟网络环境的sendToNetworkLayer，通过网络层发送到对方
		nextsequnum = (nextsequnum + 1);
		this->windows[(nextsequnum-1)%MAXWINDOWSIZE] = packetWaitingAck;//maybe some problems
		
		this->expectSequenceNumberSend = ((this->expectSequenceNumberSend + 1) );
		
	}
	

	//this->waitingState = true;																					//进入等待状态
	return true;
}

void StopWaitRdtSender::receive(Packet &ackPkt) {
	//if (this->waitingState == true) {//如果发送方处于等待ack的状态，作如下处理；否则什么都不做
		//检查校验和是否正确
		int checkSum = pUtils->calculateCheckSum(ackPkt);

		//如果校验和正确，并且确认序号=发送方已发送并等待确认的数据包序号
		if (checkSum == ackPkt.checksum && ackPkt.acknum >= this->windows[(base)%MAXWINDOWSIZE].seqnum) {
			
			
			
			cout << "此时发送方滑动窗口的base值为:" << base << endl << "缓冲区中还有报文:" << endl;
			int i = base;
			while (i != nextsequnum)
			{
				pUtils->printPacket("    ", windows[i%MAXWINDOWSIZE]);
				i = (i + 1);
			}
			this->base = (ackPkt.acknum + 1);
			pUtils->printPacket("发送方正确收到确认", ackPkt);
			if (base == nextsequnum) { 
				pns->stopTimer(SENDER,0);		//关闭定时器
			}
			else
			{
				pns->stopTimer(SENDER, 0);									//首先关闭定时器
				pns->startTimer(SENDER, Configuration::TIME_OUT, 0);			//重新启动发送方定时器
			}
		}
		

		//else {
		//	pUtils->printPacket("发送方没有正确收到确认，重发上次发送的报文", this->packetWaitingAck);
		//	pns->stopTimer(SENDER, this->packetWaitingAck.seqnum);									//首先关闭定时器
		//	pns->startTimer(SENDER, Configuration::TIME_OUT, this->packetWaitingAck.seqnum);			//重新启动发送方定时器
		//	pns->sendToNetworkLayer(RECEIVER, this->packetWaitingAck);								//重新发送数据包

		//}
	//}	
}

void StopWaitRdtSender::timeoutHandler(int seqNum) {
	//唯一一个定时器,无需考虑seqNum 
	pUtils->printPacket("发送方定时器时间到，重发上次发送的报文", this->packetWaitingAck);
	pns->stopTimer(SENDER,seqNum);										//首先关闭定时器
	pns->startTimer(SENDER, Configuration::TIME_OUT,seqNum);			//重新启动发送方定时器
	//pns->sendToNetworkLayer(RECEIVER, this->packetWaitingAck);			//重新发送数据包
	for (int i = (base); i < (nextsequnum) ; i++) {
		pns->sendToNetworkLayer(RECEIVER, windows[((base)%MAXWINDOWSIZE+i-base)%MAXWINDOWSIZE]);
	}
}
